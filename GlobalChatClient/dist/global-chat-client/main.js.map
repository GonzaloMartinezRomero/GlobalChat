{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/component/chat-viewport/chat-viewport.component.ts","./src/app/component/chat-viewport/chat-viewport.component.html","./src/app/component/user-identification/user-identification.component.ts","./src/app/component/user-identification/user-identification.component.html","./src/app/environments/environment.development.ts","./src/app/model/chatmessage.model.ts","./src/app/service/chat-manager.service.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ChatViewportComponent } from './component/chat-viewport/chat-viewport.component';\r\nimport { UserIdentificationComponent } from './component/user-identification/user-identification.component';\r\n\r\nconst routes: Routes = [  \r\n  {\r\n    path:'chatviewport',\r\n    title:'Chat', \r\n    component: ChatViewportComponent\r\n  },\r\n  {\r\n    path: 'useridentification',\r\n    title: 'Identification',\r\n    component: UserIdentificationComponent\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'useridentification',\r\n    pathMatch: 'full'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'GlobalChatClient';\r\n}\r\n","<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { UserIdentificationComponent } from './component/user-identification/user-identification.component';\r\nimport { ChatViewportComponent } from './component/chat-viewport/chat-viewport.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    UserIdentificationComponent,\r\n    ChatViewportComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ChatMessage } from 'src/app/model/chatmessage.model';\r\nimport { ChatManagerService } from 'src/app/service/chat-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-chat-viewport',\r\n  templateUrl: './chat-viewport.component.html',\r\n  styleUrls: ['./chat-viewport.component.css']\r\n})\r\nexport class ChatViewportComponent implements OnInit {\r\n  \r\n  public userName:string=\"\";\r\n  public inputMessage:string=\"\";\r\n  public messageCollection:ChatMessage[] = [];\r\n\r\n  constructor(private chatManager:ChatManagerService){}\r\n\r\n  ngOnInit(){\r\n    this.userName = this.chatManager.getUser();    \r\n    \r\n    this.messageCollection.push(new ChatMessage('Machine',`Welcome ${this.userName}`));\r\n\r\n    this.chatManager.startChatService().then(_ => {\r\n\r\n      console.log('Connection success!');\r\n      this.chatManager.onMessageReceived(this,this.receiveMessage);\r\n\r\n    }).catch(error => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n  public sendMessage():void{\r\n    \r\n    let chat:ChatMessage =new ChatMessage(this.userName,this.inputMessage);\r\n\r\n    this.chatManager.sendMessage(chat);\r\n    this.inputMessage = \"\";\r\n  }\r\n\r\n  public receiveMessage(chatMessage: ChatMessage):void{    \r\n    this.messageCollection.push(chatMessage);\r\n  }\r\n\r\n}\r\n","<div class=\"container mt-5\" style=\"text-align: center;\">\r\n  <div class=\"row m-3\">\r\n    <div class=\"col\">\r\n        <h1>Global Chat Application</h1>\r\n    </div>\r\n  </div>\r\n  <div class=\"row m-3\">\r\n    <div class=\"col\">\r\n        <h4>User: {{userName}}</h4>\r\n    </div>\r\n  </div>\r\n    <div class=\"row\">      \r\n        <div class = \"col-2\"></div>\r\n        <div class=\"col-8\">                      \r\n            <div *ngIf=\"messageCollection.length === 0\">\r\n                <p>No Messages</p>\r\n            </div>\r\n            <ul class=\"list-group\" style=\"max-height: 350px; overflow-y: scroll;\">                              \r\n                <li class=\"list-group-item list-group-item-primary\" *ngFor=\"let message of messageCollection\">\r\n                     {{message.user}}: {{message.message}}   \r\n                </li>                 \r\n            </ul>            \r\n            <div class = \"col-2\"></div>\r\n        </div>          \r\n    </div>\r\n    <div class=\"row mt-2\">\r\n        <div class=\"col\">\r\n            <textarea placeholder=\"Send text\" style=\"width: 500px; height: 100px; resize: none;\" [(ngModel)]=\"inputMessage\"></textarea>\r\n        </div>        \r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <button type=\"button\" class=\"btn btn-success\" (click)='sendMessage()'>Send</button>\r\n        </div>        \r\n    </div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ChatManagerService } from 'src/app/service/chat-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-user-identification',\r\n  templateUrl: './user-identification.component.html',\r\n  styleUrls: ['./user-identification.component.css']\r\n})\r\nexport class UserIdentificationComponent {\r\n\r\n  public userName:string = \"\";\r\n\r\n  constructor(private router:Router, private chatManager:ChatManagerService){}\r\n\r\n  public submitUser(){    \r\n    \r\n    this.chatManager.registerUser(this.userName);\r\n    this.router.navigate(['chatviewport']);\r\n  }\r\n}\r\n","<div class=\"container mt-5\" style=\"width: 400px;\">\r\n    <div class=\"row m-1\">\r\n        <h2 class=\"text-center\">User Register</h2>\r\n    </div>\r\n    <div class=\"row m-2\">\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Enter user name\" [(ngModel)]=\"userName\">\r\n    </div>\r\n    <div class=\"row m-2\">\r\n        <div class=\"col text-center\">\r\n            <button type=\"button\" class=\"btn btn-success\" style=\"height: 40px; width: 140px;\" (click)=\"submitUser()\">Submit</button>\r\n        </div>\r\n    </div>    \r\n</div>","export const environment = {\r\n    isProduction: false,\r\n    urlChatServer: 'https://localhost:5000/globalChat'\r\n  };","export class ChatMessage{\r\n    public user:string = \"\";\r\n    public message:string = \"\";\r\n\r\n    constructor(user: string, message: string) {\r\n        this.user = user;\r\n        this.message = message;\r\n      }\r\n}","import { Injectable, OnInit } from '@angular/core';\r\nimport { HubConnection } from '@microsoft/signalr';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr/dist/esm/HubConnectionBuilder';\r\nimport { environment } from '../environments/environment';\r\nimport { ChatMessage } from '../model/chatmessage.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatManagerService{\r\n\r\n  private connection: HubConnection;\r\n  private user:string=\"\";\r\n  private isServiceInitialize:boolean = false;\r\n\r\n  constructor() { \r\n\r\n    console.log(`Is production: ${environment.isProduction}`);\r\n\r\n    this.connection = new HubConnectionBuilder().withUrl('https://localhost:5000/globalChat')\r\n                                                .build();\r\n  }\r\n\r\n  public registerUser(userName:string):void{\r\n     this.user = userName;\r\n  }\r\n\r\n  public getUser():string{\r\n    return this.user;\r\n  }\r\n\r\n  public sendMessage(message:ChatMessage):void{\r\n    this.connection.invoke(\"SendMessage\",message);\r\n  }\r\n\r\n  public onMessageReceived(componentInstance:any,eventListener:(msg:ChatMessage)=>void){\r\n    this.connection.on(\"ReceiveNewMessage\", message => eventListener.call(componentInstance,message));\r\n  }\r\n\r\n  public startChatService():Promise<any>{\r\n\r\n    if(!this.isServiceInitialize){\r\n        this.isServiceInitialize = true;\r\n        return this.connection.start();\r\n    }\r\n    throw new Error(\"Service is already initialized\");\r\n  }\r\n\r\n}\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["RouterModule","ChatViewportComponent","UserIdentificationComponent","routes","path","title","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","exports","AppComponent","constructor","selectors","decls","vars","template","i0","BrowserModule","FormsModule","ReactiveFormsModule","AppModule","bootstrap","declarations","ChatMessage","chatManager","ngOnInit","userName","getUser","messageCollection","push","startChatService","then","_","console","log","onMessageReceived","receiveMessage","catch","error","sendMessage","chat","inputMessage","chatMessage","consts","ctx","router","submitUser","registerUser","navigate","environment","isProduction","urlChatServer","user","message","HubConnectionBuilder","ChatManagerService","connection","withUrl","build","invoke","componentInstance","eventListener","on","call","isServiceInitialize","start","Error","factory","providedIn","__NgCli_bootstrap_1","bootstrapModule","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}